version: 2.1

orbs: 
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-id: 
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "udapeople-backend-<<parameters.workflow-id>>"
            aws cloudformation delete-stack \
              --stack-name "udapeople-backend-<<parameters.workflow-id>>"
            aws s3 rm s3://udapeople-<<parameters.workflow-id>> --recursive
            # todo empty s3 first
            aws cloudformation delete-stack \
              --stack-name "udapeople-frontend-<<parameters.workflow-id>>"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow-id:
        type: string     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            npm -v
            SUCCESS=$(curl --insecure  https://kvdb.io/4Md9ThMoNJb7irh1Fjq1Br/migration_<< parameters.workflow-id >>)
            echo "migration status stored is: ${SUCCESS}"
            if [[  $SUCCESS == 1 ]];
            then
                echo "reverting ..."
                cd backend
                npm install
                pwd
                npm run migrations:revert
            fi 
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end build
          command: |
            cd frontend
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end scan
          command: |
            cd frontend
            npm install
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend-end scan
          command: |
            cd backend
            npm install
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "" >> .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}    

  configure-infrastructure:
    docker:
      - image: python:3.8-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache --virtual build-dependencies python3-dev libffi-dev openssl-dev build-base
            apk add tar gzip 
            pip3 install --upgrade pip
            pip3 install ansible
            pip3 install --no-cache-dir awscli
            apk add openssh-client
      - add_ssh_keys:
          fingerprints: ["85:e0:6d:d2:1e:4e:ae:80:2a:26:93:90:d6:5a:93:82"] 
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
          no_output_timeout: 30m
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}     

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y python3-pip python3-dev
            sudo pip3 install --upgrade pip
            sudo pip3 install awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/4Md9ThMoNJb7irh1Fjq1Br/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      # - image: amazon/aws-cli
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y python3-pip python3-dev
            sudo pip3 install --upgrade pip
            sudo pip3 install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            echo "uploading to s3 bucket..."
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
      # revert migrations as well 
      - revert-migrations:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}   
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      # - image: python:3.8-alpine3.11
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["85:e0:6d:d2:1e:4e:ae:80:2a:26:93:90:d6:5a:93:82"] 
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y python3-pip python3-dev
            sudo pip3 install --upgrade pip
            sudo pip3 install ansible
            sudo pip3 install --no-cache-dir awscli
            sudo pip3 install awscli
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend --exclude="node_modules" -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
      # revert migrations as well 
      - revert-migrations:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7} 

  smoke-test:
    docker: 
      - image: alpine:latest
      # Lightweight Docker image 
    shell: /bin/sh -leo pipefail
    environment:
      BASH_ENV: /etc/profile
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            apk add --no-cache python3 py3-pip
            pip3 install --upgrade pip
            pip3 install awscli
            apk add --update nodejs npm
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http:/${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo "export API_URL=${API_URL}" >> "$BASH_ENV"
      - run:
          name: Backend smoke test.
          command: |
            echo "API_URL = ${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
      # Here's where you will add some code to rollback on failure  
      # - destroy-environment:
      #     workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}
      # revert migrations as well 
      - revert-migrations:
          workflow-id: ${CIRCLE_WORKFLOW_ID:0:7}

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      # - build-frontend:
      #     context:
      #       - slack
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [master]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      - run-migrations
          # requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      - smoke-test:
          requires: [run-migrations]
          # requires: [deploy-backend]
      # - cloudfront-update
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]